{
  "name": "jQuery PluginCreator",
  "tagline": "A jQuery add-on that makes creating plugins a little easier.",
  "body": "# jQuery PluginCreator v2.0.0\r\n\r\nA jQuery plugin for creating stateful, extensible jQuery plugins using ES6\r\n\r\n\r\n## Contents\r\n\r\n1. Introduction\r\n2. Why v2.x?\r\n3. Requirements\r\n4. Usage\r\n5. The jQuery.addPlugin API\r\n6. The jQuery.fn.yourPlugin API\r\n7. The jQueryPlugin class\r\n8. Tests\r\n\r\n\r\n## Introduction\r\n\r\njQuery PluginCreator is a small JavaScript library that can be used in \r\nconjunction with jQuery to easily create jQuery plugins.\r\n\r\nCreating a plugin with PluginCreator is pretty easy, you simply implement \r\nyour plugin as an ES6 class extending the `jQueryPlugin` class exported \r\nby PluginCreator. PluginCreator creates a new jQuery plugin function that \r\ncan be executed against jQuery selections to instantiate the class against \r\nselected elements.\r\n\r\nPlugins created using PluginCreator can also be extended using standard \r\nES6 inheritance semantics to implement new plugins that extend functionality \r\nin the base plugin.\r\n\r\n\r\n## Why v2.x?\r\n\r\nv2.x of jQuery PluginCreator was initiated in order to simplify the project\r\nand leverage the simplified inheritance scheme provided by ES6. \r\n\r\nv1.x implemented a custom single-inheritance scheme along with a number \r\nof additional features that allowed for some more complex behaviours including \r\npost-definition patching of plugin members and plugin instance members. \r\nThis scheme was implemented using the `esprima` library and, as a whole, \r\nworked fairly well. It has seen production usage and generally does the \r\njob, albeit with a few caveats.\r\n\r\nGoing forward, however, the desire was to reduce the amount of custom \r\nimplementation code and capacity to engage in *funny business* while also \r\nbringing the project as a whole closer to the ES6 way of doing things.\r\nThus, v2.x was born.\r\n\r\n\r\n## Requirements\r\n\r\njQuery PluginCreator can be used in any of the following JavaScript environments:\r\n\r\n* Browser\r\n* Browser + AMD (RequireJS, curl.js, etc)\r\n* Browser + CommonJS\r\n* Browser + ES6 Modules\r\n\r\nIn order to make use of jQuery PluginCreator you will need jQuery. For a\r\nbrowser environment, any recent version should do the trick.\r\n\r\n\r\n## Usage\r\n\r\n#### Browser\r\n```html\r\n\r\n<html>\r\n<head>\r\n<script type=\"text/javascript\" src=\"jquery.js\"></script>\r\n<script type=\"text/javascript\" src=\"jquery.plugincreator.js\"></script>\r\n<script type=\"text/javascript\">\r\n\r\nclass myPlugin extends $.addPlugin.jQueryPlugin {\r\n    member1() {\r\n        // Do something\r\n    }\r\n}\r\n\r\n$.addPlugin(myPlugin, {\r\n    defaultSomething1: \"a string\",\r\n    defaultSomething2: 10\r\n});\r\n\r\n</script>\r\n</head>\r\n<body>\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n#### Browser + AMD\r\n```javascript\r\n\r\ndefine([\"jquery\", \"jquery.plugincreator\"], function ($, pluginCreator) {\r\n    class myPlugin extends pluginCreator.jQueryPlugin {\r\n        member1() {\r\n            // Do something\r\n        }\r\n    }\r\n    \r\n    $.addPlugin(myPlugin, {\r\n        defaultSomething1: \"a string\",\r\n        defaultSomething2: 10\r\n    });\r\n}\r\n\r\n```\r\n\r\n#### Browser + CommonJS\r\n```javascript\r\n\r\nvar $ = require(\"jquery\"),\r\n    pluginCreator = require(\"jquery.plugincreator\");\r\n    \r\nclass myPlugin extends pluginCreator.jQueryPlugin {\r\n    member1() {\r\n        // Do something\r\n    }\r\n}\r\n\r\n$.addPlugin(myPlugin, {\r\n    defaultSomething1: \"a string\",\r\n    defaultSomething2: 10\r\n});   \r\n    \r\n```\r\n\r\n#### Browser + ES6 Modules\r\n```javascript\r\n\r\nimport addPlugin, { jQueryPlugin } from \"jquery.plugincreator\";\r\n\r\nclass myPlugin extends pluginCreator.jQueryPlugin {\r\n    member1() {\r\n        // Do something\r\n    }\r\n}\r\n\r\naddPlugin(myPlugin, {\r\n    defaultSomething1: \"a string\",\r\n    defaultSomething2: 10\r\n});   \r\n \r\n```\r\n\r\n\r\n## The jQuery.addPlugin API\r\n\r\njQuery PluginCreator extends the global jQuery object with the following function:\r\n\r\n##### addPlugin(pluginClass, defaults={})\r\nThe addPlugin function accepts two parameters, one of which is optional.\r\n\r\nThe first parameter must be a class that inherits from the *jQueryPlugin*\r\nclass, the second is an optional plain object of default values to be\r\navailable on the `options` member of instances of the class plugin.\r\n\r\nWhen called, addPlugin generates a new function attached to the\r\n`jQuery.fn` object. This function is attached using the `name` property\r\nprovided by the plugin class. Thus, a plugin class defined as \r\n`class myPlugin extends jQueryPlugin {}` will be bound to `jQuery.fn.myPlugin`\r\nwhen passed in to the `addPlugin` function.\r\n\r\n##### addPlugin.jQueryPlugin\r\nTo aid development in environments that don't support ES6 modules, the\r\n`jQueryPlugin` class is also made available as a property of the `addPlugin`\r\nfunction that is bound to `jQuery`.\r\n\r\n\r\n## The jQuery.fn.yourPlugin API\r\n\r\nOnce the `jQuery.addPlugin` function has been used to attach a new plugin, \r\nthat plugin can be accessed as normal using the `jQuery.fn.NAME` object \r\nand applied to jQuery selections using the standard `jQuery(\"selector\").NAME()` \r\nmethod:\r\n\r\n##### jQuery.fn.NAME(options, ...args)\r\n\r\n###### options\r\nA `string` or plain `object`.\r\n\r\n###### args\r\nAdditional parameters may be passed to `jQuery.fn.NAME` and will be passed on to the plugin processing logic and\r\nfrom there to any plugin instance member functions or constructors called.\r\n\r\n###### Function behaviour\r\nThe base plugin function which can be used  to instantiate plugin \r\ninstances or interact with existing plugin instances.\r\n\r\nWhen `jQuery.fn.NAME` is called on a given jQuery selection it does the following:\r\n\r\n1. If the selection contains exactly 1 element, it returns the result of\r\n   executing the plugin processing logic on that element. This allows a \r\n   call to like `jQuery(\"#your-element\").yourPlugin(\"getInstance\")` to \r\n   work as expected. In instance where a call like `jQuery(\"#your-element\").yourPlugin(\"yourMethod\")` \r\n   would return no value or return the `undefined` value then the return \r\n   value will be the jQuery selection, preserving the jQuery chaining effect.\r\n2. If the selection does not contain exactly 1 element and...\r\n\r\n   a. `options === \"map\"`, it applies the plugin processing logic to the \r\n      selection using the `map` operation, returning \r\n      the resultant selection. This output selection can be converted to \r\n      a standard `Array` by applying the `get` operation on the selection.\r\n      When applying the plugin processing logic the initial `options` value \r\n      of `\"map\"` is discarded. The next argument is considered to be the \r\n      `options` value and any further arguments are treated as additional parameters.\r\n\r\n   b. `options !== \"map\"`, it applies the plugin processing logic to the \r\n      selection using the `each` operation, returning the selection as expected.\r\n\r\nThe plugin processing logic does the following:\r\n\r\n1. Attempt to retrieve plugin instance associated with input element.\r\n2. If an instance is found and `options` is a `string` and `instance[options]`\r\n   is a function, treat the call to `jQuery.fn.NAME` as an attempt to call \r\n   a member function on the plugin instance. The member function, `instance.[options]` \r\n   is called and any additional parameters supplied to `jQuery.fn.NAME` \r\n   will be passed to the member function being called. If `options` is not\r\n   a `string` or `instance[options]` is not a function, a `jQueryPluginCreatorError`\r\n   exception will be thrown.\r\n3. If no instance is found, instantiate a plugin instance on the element \r\n   using the contents of the `options` parameter to override values supplied \r\n   by `jQuery.fn.NAME.defaults` to the plugin instance. Additionally, any \r\n   additional parameters supplied to `jQuery.fn.NAME` will be passed in \r\n   to the `init` member function of the plugin instance. The plugin instance\r\n   is associated with its parent element using a data attribute of the form \r\n   `data-jquery-plugincreator-NAME`. The instantiated plugin is returned, \r\n   allowing plugin instantiation on single-element selections to be used for assignments.\r\n\r\n\r\n##### jQuery.fn.NAME.defaults\r\nThe `defaults` supplied to `addPlugin`. This is exposed in order to allow\r\nthe key-value pairs stored to manipulated.\r\n\r\n\r\n## The jQueryPlugin class\r\n\r\nThe jQueryPlugin class provides a base for stateful jQuery Plugins. The\r\nfollowing methods are provided by the jQueryPlugin class:\r\n\r\n##### constructor(element, defaults={}, options={})\r\nThe default constructor performs a number of important set-up tasks\r\nfor a plugin instance. \r\n\r\nIt binds `this.element` to `element`, `this.context` to `jQuery(element)` \r\nand `this.options` to the result of mering `options` over `defaults`.\r\n\r\nWhile it is possible to override the `constructor` method, it is not\r\nrecommended. Rather, implement your initialization code in the `init`\r\nmethod. If you must override `constructor`, ensure you call the \r\nancestor `constructor` to preserve initialisation behaviour.\r\n\r\n##### init()\r\nThe default `init` method does nothing. If you wish to perform\r\ncustom initialization it should be implemented by overriding this\r\nmethod. \r\n\r\nAlthough the default method accepts no parameters you can provide\r\nones when you override it. \r\n\r\n##### getInstance()\r\nThe `getInstance` method exists in order to allow for jQuery usage\r\nsuch as `let pluginInstance = jQuery(\"#something\").myPlugin(\"getInstance\")`.\r\n\r\n##### update(options)\r\nThis method can be used to updated the data stored in `this.options` for\r\na plugin instance. The `jQuery.extend` function is used to perform this\r\nupdate with the recursive merge option enabled.\r\n\r\n##### destroy()\r\nThe `destroy` method is essentially a destructor, albeit one that needs\r\nto be manually called. The default implementation does the following:\r\n\r\n1. Triggers an event named `jquery-plugincreator-NAME.destroy` on `this.context`\r\n2. Removes the `jquery-plugincreator-NAME` class on `this.element`\r\n3. Removes the `jquery-plugincreator-NAME` data associated with `this.element`\r\n4. Removes the `data-jquery-plugincreator-NAME` attribute on `this.element` \r\n\r\nIf you override this method, you should ensure you call through to the\r\nancestor `destroy` function to ensure it the method continues behave as\r\nexpected by users.\r\n\r\n\r\n## Tests\r\n\r\nIn order to run the tests you will need to checkout the project source,\r\nexecute `npm install` in the source root and then run `npm run-script test`.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}